#!/bin/bash

# Command Hub - Global Personal AI Assistant Launcher
# Summons Claude Code with full repo access and dangerous permissions

set -e

# Configuration
REPOS_DIR="$HOME/repos"
HUB_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Function to scan for repo directories
get_repo_paths() {
    local dir_args=""
    
    if [ -d "$REPOS_DIR" ]; then
        # Find all directories in ~/repos and add them as --add-dir arguments
        for repo_dir in "$REPOS_DIR"/*; do
            if [ -d "$repo_dir" ]; then
                dir_args="$dir_args --add-dir \"$repo_dir\""
            fi
        done
    fi
    
    echo "$dir_args"
}

# Function to generate repository context file
generate_repo_context() {
    local context_file="/tmp/hub-repo-context.md"
    
    cat > "$context_file" << EOF
# Your Personal Development Environment - Hub Session Context

*Auto-generated by hub launcher - $(date)*

## Your Role & Purpose
You are my personal coding assistant and DevOps automation partner. Your primary job is to:

- **Local Development**: Work with repositories in ~/repos/ (DTMI, ASAP Fork/TRMI, hub)  
- **AWS Operations**: Manage DTMI/TRIC/TRMI AWS accounts, databases, deployments
- **GitHub Actions**: Analyze workflows, deployment logs, CI/CD issues
- **JIRA Automation**: Create tickets, generate reports, track releases
- **Database Management**: Port forwarding, queries, schema analysis

## Key Assumptions
- **"DTMI GitHub account"** = local \`~/repos/dtmi\` repository  
- **"ASAP Fork" or "TRMI"** = local \`~/repos/asap-fork\` repository
- **Web searches** only when I explicitly ask or for external documentation
- **Default to local repositories** for all project-related questions

## Available Repositories & What They Are

EOF
    
    if [ -d "$REPOS_DIR" ]; then
        for repo_dir in "$REPOS_DIR"/*; do
            if [ -d "$repo_dir" ]; then
                local repo_name=$(basename "$repo_dir")
                echo "### $repo_name" >> "$context_file"
                echo "- **Path**: \`$repo_dir\`" >> "$context_file"
                
                # Add specific context for known repos
                case "$repo_name" in
                    "dtmi")
                        echo "- **Purpose**: Discount Tire Mobile Installation - Node.js/React/React Native" >> "$context_file"
                        echo "- **AWS**: dtmi-prod, dtmi-nonprod profiles" >> "$context_file"
                        echo "- **Database**: Aurora MySQL, port-forward via npm scripts" >> "$context_file"
                        ;;
                    "asap-fork")
                        echo "- **Purpose**: TRMI/ASAP Fork - Mobile tire installation (TRIC rebrand)" >> "$context_file"
                        echo "- **AWS**: default profile" >> "$context_file"
                        echo "- **Database**: Aurora MySQL, multiple environments" >> "$context_file"
                        ;;
                    "hub")
                        echo "- **Purpose**: Your personal automation MCP server and tools" >> "$context_file"
                        echo "- **Contains**: JIRA automation, AWS tools, database connections" >> "$context_file"
                        ;;
                esac
                echo "" >> "$context_file"
            fi
        done
    else
        echo "⚠️ No ~/repos directory found" >> "$context_file"
    fi
    
    cat >> "$context_file" << EOF

## MCP Tools Available
Your automation superpowers - use these for natural language commands:
- **create_ticket** / **read_ticket**: JIRA operations
- **generate_deployment_report**: Excel reports from JIRA data  
- **connect_to_database**: Auto port forwarding + client launch
- **reset_cognito_password**: AWS Cognito user management
- **aws_login**: Profile switching and SSO authentication

## Working Style
- **Be proactive** with MCP tools when I mention automation tasks
- **Default to local repos** unless I explicitly ask about external resources
- **Ask clarifying questions** about environment/project when ambiguous
- **Use your dangerous permissions** - you have full access to ~/repos/ for a reason

Ready to help with your local development ecosystem! 🚀
EOF
    
    echo "$context_file"
}

# Function to launch Claude Code with hub capabilities
launch_claude() {
    local claude_args="$1"
    local repo_files
    
    # Get all repo paths for --add-dir arguments
    repo_files=$(get_repo_paths)
    
    # Add hub directory itself
    repo_files="$repo_files --add-dir \"$HUB_DIR\""
    
    # Build final command
    local cmd="claude --dangerously-skip-permissions $repo_files $claude_args"
    
    echo "🚀 Launching Command Hub..."
    echo "📁 Hub directory: $HUB_DIR"
    echo "📂 Repos directory: $REPOS_DIR"
    echo "🔓 Dangerous permissions: ENABLED"
    
    # Change to hub directory to ensure hub's CLAUDE.md is loaded
    cd "$HUB_DIR"
    
    # Execute Claude Code
    eval "$cmd"
}

# Main script logic
main() {
    # Handle different flag combinations
    case "$*" in
        "--resume"|"-r")
            echo "📚 Resuming previous Claude session..."
            launch_claude "--resume"
            ;;
        "--continue"|"-c")
            echo "⏭️ Continuing last Claude session..."
            launch_claude "--continue"
            ;;
        "")
            echo "🆕 Starting new Claude session..."
            launch_claude ""
            ;;
        "--debug")
            echo "🔍 Debug mode - showing repo discovery..."
            echo "📂 Repos directory: $REPOS_DIR"
            echo "📁 Found repos:"
            for repo_dir in "$REPOS_DIR"/*; do
                if [ -d "$repo_dir" ]; then
                    echo "  - $(basename "$repo_dir")"
                fi
            done
            echo ""
            echo "🔧 Would execute:"
            repo_files=$(get_repo_paths)
            echo "claude --dangerously-skip-permissions $repo_files --add-dir \"$HUB_DIR\""
            ;;
        *)
            echo "❓ Unknown arguments: $*"
            echo ""
            echo "Usage:"
            echo "  hub              Start new session with repo access"
            echo "  hub --resume     Resume previous session"  
            echo "  hub --continue   Continue last session"
            echo "  hub --debug      Show repo discovery info"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"